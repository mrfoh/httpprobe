name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on versioned tags, e.g., v1.0, v20.15.10

env:
  BINARY_NAME: "httpprobe"
  GO_VERSION: "1.23.3"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test
        run: make test

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - platform: linux
            arch: amd64
          - platform: linux
            arch: arm64
          - platform: darwin
            arch: amd64
          - platform: darwin
            arch: arm64
          - platform: windows
            arch: amd64
          - platform: windows
            arch: arm64
          - platform: windows
            arch: 386

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build
        env:
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
        run: |
          make build
          ls -la bin
          
      - name: Prepare artifact
        run: |
          ARTIFACT_NAME="${{ env.BINARY_NAME }}-${{ env.VERSION }}_${{ matrix.platform }}_${{ matrix.arch }}"
          OUTPUT_PATH="dist/${ARTIFACT_NAME}"
          mkdir -p $OUTPUT_PATH
          
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            mv bin/${{ env.BINARY_NAME }} bin/${{ env.BINARY_NAME }}.exe
            mv bin/${{ env.BINARY_NAME }}.exe $OUTPUT_PATH/${{ env.BINARY_NAME }}.exe
          else
            mv bin/${{ env.BINARY_NAME }} $OUTPUT_PATH/${{ env.BINARY_NAME }}
          fi
          
          # Archive the binary (without extra directories)
          tar -czf dist/$ARTIFACT_NAME.tar.gz -C $OUTPUT_PATH .

          echo "ARTIFACT_PATH=dist/$ARTIFACT_NAME.tar.gz" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Release Body
        run: |
          echo "## Changelog" > release_body.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo $(git rev-list --max-parents=0 HEAD))..HEAD >> release_body.md

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_PERSONAL_TOKEN }}
          name: Release ${{ github.ref_name }}
          body_path: release_body.md
          files: artifacts/**/*.tar.gz

  update-scoop:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GH_PERSONAL_TOKEN }}

      - name: Get release version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION="${TAG_NAME#v}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Download release assets
        run: |
          mkdir -p tmp
          for arch in amd64 386 arm64; do
            curl -L "https://github.com/mrfoh/httpprobe/releases/download/${{ github.ref_name }}/httpprobe-${{ github.ref_name }}_windows_$arch.tar.gz" -o tmp/httpprobe-${{ github.ref_name }}_windows_$arch.tar.gz
          done

      - name: Compute SHA256 hashes
        run: |
          for arch in amd64 386 arm64; do
            HASH=$(sha256sum tmp/httpprobe-${{ github.ref_name }}_windows_$arch.tar.gz | awk '{print $1}')
            echo "arch_${arch}_hash=$HASH" >> $GITHUB_ENV
          done

      - name: Update Scoop manifest
        run: |
          jq --arg version "${{ env.version }}" \
             --arg amd64 "${{ env.arch_amd64_hash }}" \
             --arg i386 "${{ env.arch_386_hash }}" \
             --arg arm64 "${{ env.arch_arm64_hash }}" \
          '
          .version = $version |
          .architecture."64bit".url = "https://github.com/mrfoh/httpprobe/releases/download/v" + $version + "/httpprobe-v" + $version + "_windows_amd64.tar.gz" |
          .architecture."64bit".hash = $amd64 |
          .architecture."32bit".url = "https://github.com/mrfoh/httpprobe/releases/download/v" + $version + "/httpprobe-v" + $version + "_windows_386.tar.gz" |
          .architecture."32bit".hash = $i386 |
          .architecture."arm64".url = "https://github.com/mrfoh/httpprobe/releases/download/v" + $version + "/httpprobe-v" + $version + "_windows_arm64.tar.gz" |
          .architecture."arm64".hash = $arm64
          ' bucket/httpprobe.json > bucket/httpprobe.json.tmp && mv bucket/httpprobe.json.tmp bucket/httpprobe.json

      - name: Commit and push updated manifest
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add bucket/httpprobe.json
          git commit -m "chore: update scoop manifest for ${{ github.ref_name }} [skip ci]" || exit 0
          git push origin main
